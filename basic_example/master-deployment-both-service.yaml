apiVersion: apps/v1 #deployment api version 
kind: Deployment # is a kubernets Object /define the new deployment object 

metadata: #define the name of the app # example
# kubectl create deplyment first-app here first-app is the app name
  name: first-app #name of the deployment

spec: #specification of the whole pods 

  replicas: 2 # how many times the pods replicate into the container
  selector:  #
    matchLabels:
    #matchExpression -> is a complex selector we will see this later int the course
      app: first-app
      tier: backend
  template: # is related to the --image=<name of the image>
    metadata: 
      labels: 
        app: first-app # label name is a form of key value pair the value is for upto us we can define the app name what ever we want example app_name : second-app or deploy: second-app is upto us. at the same time we add muliple label in the same labels
        tier: backend
    spec: # specification of the individual of the deployment pods  
      containers: #here we add muliple container of the same pods 
      - name: second-node #name is the container  first container name inside of the pod
        image: karthicksaga/kube-first-app #pod first container image

          #- name: second-container
          #image: second-container -image
        ports:
        - containerPort: 8080
---
#sample imperative command is transfered into the declarative command 
#kubectl expose deployment first-app --type=LoadBalancer --port=8080
apiVersion: v1
kind: Service
metadata: 
  name: backend-serice
spec:
  selector:
    app: first-app
    tier: backend # no need to specify the all the labels in many times
  ports:
    - protocol: 'TCP'
      port: 80 # to access the application outside of the application 
      targetPort: 8080 # inside the container port means declare into the node js application

      # At the same time we define multiple port in the same conatier to access thr app outside the world
      #
  type: LoadBalancer #CluserIP -> which is default ip which is expose the port Internally to the cluster
  # NodePort -> Which is expose the port and ip at the worker node 
  # LoadBalancer -> access outside the world means the pods expose the outside the world and also distribute the request equally 
